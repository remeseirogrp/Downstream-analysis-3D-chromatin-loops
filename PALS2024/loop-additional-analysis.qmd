---
title: "Loop_analysis.R"
author: "Chaitali Chakraborty"
format: html
editor: visual
---

## Downstream analysis of HiChIP/HiC loops

This shiort tutorial aims to integrate example chromation loops that you may have acquired through hichipper etc. The files to be used are in the Github page remeseirogrp/3D-genomics-blueprint

## Contents

Workflow

-   Overlap of loops

-   UCSC .interact files

-   Annotating loops to genome

-   Analysing length of differential loops

-   Extracting anchors from loops, for more downstream analysis

## Load libraries

The prior thing to do before this is install alrequired libraries, using requiredPackages.R. Then run this

```{r}
suppressPackageStartupMessages({library(ggplot2)
  library(dplyr)
  library(tidyverse)
  library(stringr)
  library(ggpubr)
  library(rstatix)
  library(circlize)
  library(devtools)
  library(RColorBrewer)
  library(clusterProfiler)
  library(GenomicRanges)
  library(rtracklayer)
  library(BSgenome)
  library(BSgenome.Hsapiens.UCSC.hg38)
  library(TxDb.Hsapiens.UCSC.hg38.knownGene)
  library(ComplexHeatmap)
  library(org.Hs.eg.db)
  library(InteractionSet)
  library(GenomicInteractions)
  library(edgeR)
  library(limma)
  library(clusterProfiler)
  library(DESeq2)
  library(Sushi)
  library(diffloop)})
```

#### Overlap of loops

We want to find out which loops are present specifically in one condition to the other (GB specific loops, hAstro specific loops), and loops that are v present in both cells (common).

This dataframe was obtained from diffloops analysis. You can get a similar data frame from FitHiChIP. Both diffloops and FitHiCHIP can take loops from individual sample loops and merge the anchors, in proximity of 500 bp and recreate loops, that are present in the input samples. The counts indicate, how many times the loop was called for each sample.

FitHiC and HiCompare does similar merging, for HiC loos, It is better that you use an avialbale and trusted tool for merging pf anchors, it makes it easy.

```{r}
#The dataset that we are loading here is a dummy dataset created from the HiChIP data of https://doi.org/10.1038/s41467-023-41919-x
data <- read.table("~/Desktop/PALS2024_3Dcourse/PALS2024/data_chr15.2_studentsdataframe.txt") #change your path here
head(data)
#here you want to create an id for the loops, for tracing purposes
data$loopID <- paste(data$chr.x, data$start.x, sep = ":")
data$loopID <- paste(data$loopID, data$end.x, sep = "-")
data$loopID <- paste(data$loopID, data$chr.y, sep = "_")
data$loopID <- paste(data$loopID, data$start.y, sep = ":")
data$loopID <- paste(data$loopID, data$end.y, sep = "-")
head(data)
#when we do overlap of loops we need a name or id to trace back the intersection to. This. column gives us this possibility
hAstro_loops <- data %>% dplyr::filter(hAstro != 0) #1088

hAstro <- hAstro_loops$loopID


U3028_loops <- data %>% dplyr::filter(U3028 != 0) #3085

U3028 <- U3028_loops$loopID

#Overlap matrix with loop IDs

lt1 = list("hAstro"=hAstro, "U3028"=U3028)
mat1 <- list_to_matrix(lt1)
ltdf1 <- as.data.frame(mat1) #a matrix with binaries for TRUE and FALSe on presense and absence of loops

mat2 <- make_comb_mat(lt1)


#make an UpSet plot to visualize the overlaps

UpSet(mat2, set_order = c("hAstro", "U3028"), top_annotation = upset_top_annotation(mat2, add_numbers= TRUE), right_annotation = upset_right_annotation(mat2, add_numbers=TRUE))



#png("data_studentsdataframe_upsetmatrix_UPSETPLOT.png", width = 14, height = 4, #res = 600, units = 'in')
#UpSet(mat2, set_order = c("hAstro", "U3028"), top_annotation = #upset_top_annotation(mat2, add_numbers= TRUE), right_annotation = #upset_right_annotation(mat2, add_numbers=TRUE))
#par(mar=c(6,5,5,6) + 0.1)
#dev.off()

ltdf1$presence <- rowSums(ltdf1[, c(1,2)])

#let's annotate
ltdf1 <- ltdf1 %>% dplyr::mutate(annotation = case_when((presence == 2) ~ "common",
                                                        (presence == 1 & hAstro == 1) ~"hAstro.specific",
                                                        (presence == 1 & U3028 == 1)~ "GB.specific"))

table(ltdf1$annotation)


#save this file
#write.csv(ltdf1, "data_studentsdataframe_upsetmatrix_annotated.csv") 

#now annotate your loop matrix

data$annotation <- ltdf1$annotation[match(data$loopID, rownames(ltdf1))]
data <- data %>% dplyr::mutate(colour = case_when(data$annotation == "common" ~ "#a0a0a0",
                                                                  data$annotation ==  "hAstro.specific" ~ "#1f78b4",
                                                                  data$annotation == "GB.specific"~"#e31a1c"))

#these colours are what we aregoing to use to make an interact tract for UCSc

#write.table(data, "data_studentsdataframe_annotated.txt", sep = "\t", quote = F)

```

#### UCSC .interact files

Look at the UCSC interact and bigInteract <https://genome.ucsc.edu/goldenPath/help/interact.html>. We are organizing our data frame to UCSC .interact format for visualization of our loops. This is a dummy track for you to look at <https://genome.ucsc.edu/s/chaisan/PALS2024>

```{r}
df <- data[, c(1,2,3)]
df$name <- paste("Chaitali", 1:nrow(df), sep = "_") #you should name your experiment so that you can trace the comaprison, I gave it my name, since it is a dummy file
df$score <- data$total_counts
df$value <- -log10(data$mango.FDR)
df$value <- ifelse(df$value == "Inf", 20, df$value)
class(df$value)
#[1] "numeric"

df$exp <- data$annotation
df$color <- data$colour
df$sourceChrom <- df$chr.x
df$sourceStart <- df$start.x
df$sourceEnd <- df$end.x
df$sourceName <- "anchor1"
df$sourceStrand <- "+"
df$targetChrom <- data$chr.y
df$targetStart <- data$start.y
df$targetEnd <- data$end.y
df$targetName <- "anchor2"
df$targetStrand <- "+"

head(df)

#write.table(df, "data_studentsdataframe_annotated_UCSCinteract.txt", sep = "\t", quote = F)

```

Now take this file to terminal/ shell to trim it so that it can be uploaded to your UCSC browser.

```{bash}
#tail -n +2 data_studentsdataframe_annotated_UCSCinteract.txt > tmpfile
#less tmpfile
#cut -f 2-19 tmpfile > tmpfile1
#less tmpfile1
#echo -e " track type=interact name="H3K4Me3.HiChIP" description="Chr15 subset" interactDirectional=true maxHeightPixels=200:100:50 visibility=full itemRgb="On" " | cat - tmpfile1  > data_studentsdataframe_annotated_UCSCbrowser.interact

```

#### Annotating loops to genome

Genome annotation helps us understand which genomic regions and how many of them are folded in a specific cell or condition with respect to control.

```{r}
#prepare bedpe files  #8 coloumns - chr.x. start.x, end.x, chr.y, start.y, end.y, name,counts/score/fdr
#astro specific 
astro_specific <- data[data$annotation == "hAstro.specific", ]

head(astro_specific)

bedpe <- astro_specific[, c(1,2,3,4,5,6, 12,11)]
#write.table(bedpe, "hAstro_sp_chr15_studentsdataframet.txt", sep = "\t", quote = F)


GB_specific <- data[data$annotation == "GB.specific", ]

head(GB_specific)

bedpe <- GB_specific[, c(1,2,3,4,5,6, 12,11)]
#write.table(bedpe, "GB_sp_chr15_studentsdataframet.txt", sep = "\t", quote = F)


common <- data[data$annotation == "common", ]

head(common)

bedpe <- common[, c(1,2,3,4,5,6, 12,11)]
#write.table(bedpe, "common_chr15_studentsdataframet.txt", sep = "\t", quote = F)

```

For demonstration sake I am going to convert the GB_sp_chr15_studentsdataframe.txt to a .bedpe file in shell, but you can use any of them for practise, for comparison, etc.

```{bash}
#less GB_sp_chr15_studentsdataframet.txt
#cat GB_sp_chr15_studentsdataframet.txt | wc -l #2424
#tail -n +2 GB_sp_chr15_studentsdataframet.txt > tmpfile
#cut -f 2-9 tmpfile > GB_sp_chr15_studentsdataframet.bedpe
#less GB_sp_chr15_studentsdataframet.bedpe
#cat GB_sp_chr15_studentsdataframet.bedpe | wc -l #2423

```

Here we will use Genomic Interactions and the UCSC's genomic annotations for hg38 to annoate the genome.

```{r}
#Run Genomic annotations
dfloops <- file.path("~/Desktop/PALS2024_3Dcourse/PALS2024/GB_sp_chr15_studentsdataframet.bedpe") #change path
dfinter <- makeGenomicInteractionsFromFile(dfloops, type = 'bedpe', experiment_name = "GB specific")
head(interactionCounts(dfinter))

median_distance_interactions <- median(calculateDistances(dfinter, method = "midpoint"))
median_distance_interactions



txdb <- TxDb.Hsapiens.UCSC.hg38.knownGene
refseq.genes <- genes(TxDb.Hsapiens.UCSC.hg38.knownGene)
refseq.transcripts = transcriptsBy(TxDb.Hsapiens.UCSC.hg38.knownGene, by="gene")
non_pseudogene = names(refseq.transcripts) %in% unlist(refseq.genes$gene_id) 
refseq.transcripts = refseq.transcripts[non_pseudogene] 

refseq.promoters = promoters(refseq.transcripts, upstream=2000, downstream=2000)
# unlist object so "strand" is one vector
refseq.transcripts.ul = unlist(refseq.transcripts) 
# terminators can be called as promoters with the strand reversed
strand(refseq.transcripts.ul) = ifelse(strand(refseq.transcripts.ul) == "+", "-", "+") 
refseq.terminators.ul = promoters(refseq.transcripts.ul, upstream=1000, downstream=1000) 
# change back to original strand
strand(refseq.terminators.ul) = ifelse(strand(refseq.terminators.ul) == "+", "-", "+") 
# `relist' maintains the original names and structure of the list
refseq.terminators = relist(refseq.terminators.ul, refseq.transcripts)


annotation.features = list(promoter=refseq.promoters, 
                           terminator=refseq.terminators, 
                           gene.body=refseq.transcripts)
annotateInteractions(dfinter, annotation.features)

annotationFeatures(dfinter)


categoriseInteractions(dfinter)


dfinter_df <- data.frame(dfinter)
head(dfinter_df[, c(1,2,3,6,10,11,12,15,19,20)])


dfinter_df$start1 <- dfinter_df$start1 -1
dfinter_df$start2 <- dfinter_df$start2 -1

head(dfinter_df[, c(1,2,3,6,10,11,12,15,19,20)])

#here we are annotating the loops as promoter-promoter (pp), when both anchors are annotated to promoters, promoter-enhancer, when a promoter anchor is connected to an anchor which is not a promoter, we call distal-distal - (intergenic/intronic regions connected to anchors) as enhancer-enhancer (ee loops). Usually gene-body (exonic) or terminator (20bp GC rich region) are marked with specific histone marks such as H3K36Me3 at exons, what their interactions with each other or to a distal region inplies is not very clear so we call such interactions 'others'.

dfinter_df <- dfinter_df %>% dplyr::mutate(interaction.type =
                                             case_when((dfinter_df$node.class1 == "promoter" &dfinter_df$node.class2 == "promoter"~"pp"),
                                                       (dfinter_df$node.class1 == "promoter" &dfinter_df$node.class2 == "distal"~"pe"),
                                                       (dfinter_df$node.class1 == "distal" &dfinter_df$node.class2 == "promoter"~"pe"),
                                                       (dfinter_df$node.class1 == "promoter" &dfinter_df$node.class2 == "gene.body"~"pe"),
                                                       (dfinter_df$node.class1 == "gene.body" &dfinter_df$node.class2 == "promoter"~"pe"),
                                                       (dfinter_df$node.class1 == "promoter" &dfinter_df$node.class2 == "terminator"~"pe"),
                                                       (dfinter_df$node.class1 == "terminator" &dfinter_df$node.class2 == "promoter"~"pe"),
                                                       (dfinter_df$node.class1 == "distal" &dfinter_df$node.class2 == "distal"~"ee"),
                                                       (dfinter_df$node.class1 == "distal" &dfinter_df$node.class2 == "gene.body"~"others"),
                                                       (dfinter_df$node.class1 == "gene.body" &dfinter_df$node.class2 == "distal"~"others"),
                                                       (dfinter_df$node.class1 == "gene.body" &dfinter_df$node.class2 == "gene.body"~"others"),
                                                       (dfinter_df$node.class1 == "distal" &dfinter_df$node.class2 == "terminator"~"others"),
                                                       (dfinter_df$node.class1 == "terminator" &dfinter_df$node.class2 == "distal"~"others"),
                                                       (dfinter_df$node.class1 == "terminator" &dfinter_df$node.class2 == "terminator"~"others"),
                                                       (dfinter_df$node.class1 == "gene.body" &dfinter_df$node.class2 == "terminator"~"others"),
                                                       (dfinter_df$node.class1 == "terminator" &dfinter_df$node.class2 == "gene.body"~"others")))




dfinter_df_sh <- dfinter_df[, c(1,2,3,6,10,11,12,15,19,20,21)]
head(dfinter_df_sh)

#write.csv(dfinter_df_sh, "GB_sp_chr15_GA.csv")

#get genes annotated to the anchors of the loops

dfinter_pp <- dfinter[is.pp(dfinter)]
dfinter_pp_genes <- dfinter_pp@regions@elementMetadata@listData$promoter.id
dfinter_pp_genes_un <- unlist(dfinter_pp_genes)
dfinter_pp_genes_un <- na.omit(dfinter_pp_genes_un)
dfinter_pp_genes_dedup <- dfinter_pp_genes_un[!duplicated(dfinter_pp_genes_un)]
converted <- bitr(dfinter_pp_genes_dedup, fromType = "ENTREZID", toType = c("ENSEMBL", "SYMBOL"), OrgDb = org.Hs.eg.db, drop = FALSE) #14054
converted_pp <- converted
converted_pp$annotation <- "pp"

converted_pp <- converted_pp[!duplicated(converted_pp$ENTREZID),] 

dfinter_pd <- dfinter[is.pd(dfinter)]
dfinter_pd_genes <- dfinter_pd@regions@elementMetadata@listData$promoter.id
dfinter_pd_genes_un <- unlist(dfinter_pd_genes)
dfinter_pd_genes_un <- na.omit(dfinter_pd_genes_un)
dfinter_pd_genes_dedup <- dfinter_pd_genes_un[!duplicated(dfinter_pd_genes_un)] 
converted_pd <- bitr(dfinter_pd_genes_dedup, fromType = "ENTREZID", toType = c("ENSEMBL", "SYMBOL"), OrgDb = org.Hs.eg.db, drop = FALSE)

dfinter_pt <- dfinter[is.pt(dfinter)]
dfinter_pt_genes <- dfinter_pt@regions@elementMetadata@listData$promoter.id
dfinter_pt_genes_un <- unlist(dfinter_pt_genes)
dfinter_pt_genes_un <- na.omit(dfinter_pt_genes_un)
dfinter_pt_genes_dedup <- dfinter_pt_genes_un[!duplicated(dfinter_pt_genes_un)] 
converted_pt <- bitr(dfinter_pt_genes_dedup, fromType = "ENTREZID", toType = c("ENSEMBL", "SYMBOL"), OrgDb = org.Hs.eg.db, drop = FALSE)

dfinter_pg <- dfinter[isInteractionType(dfinter, "promoter", "gene.body")]
dfinter_pg_genes <- dfinter_pg@regions@elementMetadata@listData$promoter.id
dfinter_pg_genes_un <- unlist(dfinter_pg_genes)
dfinter_pg_genes_un <- na.omit(dfinter_pg_genes_un)
dfinter_pg_genes_dedup <- dfinter_pg_genes_un[!duplicated(dfinter_pg_genes_un)] #2715
converted_pg <- bitr(dfinter_pg_genes_dedup, fromType = "ENTREZID", toType = c("ENSEMBL", "SYMBOL"), OrgDb = org.Hs.eg.db, drop = FALSE)

converted_pe <- rbind(converted_pd, converted_pg, converted_pt)
converted_pe <- converted_pe[!duplicated(converted_pe$ENTREZID),]
converted_pe$annotation <- "pe"

converted <- rbind(converted_pp, converted_pe) 

#unique genes annotated to anchors 
length(unique(converted$ENTREZID)) #[1] 622 In this case all gene promoters that are annotated to pp loops are also annotated to pe


#write.csv(converted, "GB_sp_chr15_GA_genes.csv")

```

#### Analysing lengths of differential loops

Loop lengths help us understand how the chromatin is folded in a specific ondition with respect to others. Here we are looking how U3028 GB specifc loops are compacted in chr 15 in comparison to loops that are unchanged in hAstro and GB (common), and control hAstro specific loops.

```{r}
#we will look at the median and interquartile ranges in our analysis. You can also look at mean and standard error
data_summary <- function(x){
  out <- quantile(x, probs = c(0.25,0.5,0.75))
  names(out) <- c("ymin","y","ymax")
  return(out) 
}


data$log2.loopWidth <- log2(data$loopWidth)

#look at the distribution of loop length

hist(data$loopWidth)


hist(data$log2.loopWidth)

#since in our case the data does not look normal, we shall use Wilcoxon test to look at statistical significance in loop length

data$annotation <- factor(data$annotation, levels = c("hAstro.specific", "GB.specific", "common") )

stat.test1 <- data %>%
  wilcox_test(log2.loopWidth~annotation, p.adjust.method = "BH") %>%
  add_significance()
stat.test1


stat.test1 <- stat.test1 %>% add_xy_position(x = "annotation")
stattest1df <- as.data.frame(stat.test1)
stattest1df$groups <- as.character(stattest1df$groups)
#save the statical data frame for article and replotting if needed
#write.csv(stattest1df, "Wilcoxon.test.csv")

#here build the plot step wise
p1 <- ggplot(df, aes(x=data$annotation, y=data$loopWidth)) + geom_violin(fill = "gray", size = 0.5, linewidth=0.3)
p1

p2 <- p1 + stat_summary(fun.data=data_summary, size = 0.1)
p2

p3 <- p2 + theme_bw() + theme(panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank())
p3
p4 <- p3  + ggtitle("Loop length") +
  theme(plot.title = element_text(hjust = 0.5, size= 10)) + xlab("Annotations") + ylab("loop length (bp)") + theme(axis.text.x = element_text(size = 6, angle = 0),
                                                                                                                          axis.text.y = element_text(size = 8),axis.title = element_text(size = 10),
                                                                                                                          axis.title.x = element_text(size = 8),  axis.title.y = element_text(size = 8))

p4


p5 <- p4 + stat_pvalue_manual(
  stat.test1, label = "Wilcoxon-test, p.adj = {p.adj} {p.adj.signif}",
  vjust = -1.3, bracket.nudge.y = 0.5, size = 1.5,y.position = seq(from=2050000,by=400000,length.out=3)
) + ylim(5000, max(seq(from=2050000,by=400000,length.out=4)))

p5


#png("looplength.png", width = 4, height = 6, res = 600, units = 'in')
#p5
#par(mar=c(8, 6, 6, 5) + 0.1)
#dev.off()

```

#### Extracting anchors from loops for more downstream analysis

In this part of the analysis, we might want to overlap anchors to ChIP-Seq peaks obtained for TFs, histone marks, CTCF etc., to integrate loops to yopur epigenetic data to understand which epigenetic regions are re organized 3D.

```{r}
#fetch anchors for downstream analysis
#for GB specific loops
#anchor.x

GB_specific <- data %>% dplyr::filter(annotation ==  "GB.specific")

anchor.x <- GRanges(seqnames = GB_specific$chr.x, IRanges(start = GB_specific$start.x, end =GB_specific$end.x))

anchor.x


anchor.y <- GRanges(seqnames = GB_specific$chr.y, IRanges(start = GB_specific$start.y, end =GB_specific$end.y))

anchor.y


bed_file <- GRangesList(anchor.x, anchor.y)

bed_file <- unlist(bed_file)

bed_file



bed_unique <- unique(bed_file)

bed_unique




#export.bed(bed_unique,"GB.specific.anchors.bed")


```
